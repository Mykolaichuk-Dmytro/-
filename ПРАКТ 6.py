import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞
API_TOKEN = '7676689297:AAFwrBZlmlMg0EFdSuKKBalC8aM3qOt5Jzk'

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§—ñ–∫—Ç–∏–≤–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–µ–ø–æ–∫
catalog = [
    {"id": 1, "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∫–µ–ø–∫–∞", "price": 1000, "description": "–Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–±—ñ–∂–æ–∫."},
    {"id": 2, "name": "–ö–ª–∞—Å–∏—á–Ω–∞ –∫–µ–ø–∫–∞", "price": 1200, "description": "–ï–ª–µ–≥–∞–Ω—Ç–Ω–∏–π —Å—Ç–∏–ª—å."},
    {"id": 3, "name": "–ö–µ–ø–∫–∞ —É–Ω—ñ—Å–µ–∫—Å", "price": 1500, "description": "–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö."}
]

# –ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_cart = {}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="–ö–æ—à–∏–∫")],
        [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –∫–µ–ø–æ–∫. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        reply_markup=main_menu
    )

# –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞—Ç–∞–ª–æ–≥—É
@dp.message(lambda message: message.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    catalog_text = "–û—Å—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫–µ–ø–æ–∫:\n\n"
    for item in catalog:
        catalog_text += f"üß¢ {item['name']}\n–¶—ñ–Ω–∞: {item['price']}‚Ç¥\n{item['description']}\n\n"
    catalog_text += "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –¥–æ –∫–æ—à–∏–∫–∞."
    await message.answer(catalog_text)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—à–∏–∫–∞
@dp.message(lambda message: message.text.isdigit())
async def add_to_cart(message: Message):
    product_id = int(message.text)
    product = next((item for item in catalog if item["id"] == product_id), None)
    if product:
        user_cart.setdefault(message.from_user.id, []).append(product)
        await message.answer(f"üõí {product['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ.")

# –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞
@dp.message(lambda message: message.text == "–ö–æ—à–∏–∫")
async def show_cart(message: Message):
    cart = user_cart.get(message.from_user.id, [])
    if cart:
        cart_text = "üõí –í–∞—à –∫–æ—à–∏–∫:\n\n"
        total = 0
        for item in cart:
            cart_text += f"{item['name']} - {item['price']}‚Ç¥\n"
            total += item['price']
        cart_text += f"\n–†–∞–∑–æ–º: {total}‚Ç¥"
        await message.answer(cart_text)
    else:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

# –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.message(lambda message: message.text == "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def checkout(message: Message):
    cart = user_cart.get(message.from_user.id, [])
    if cart:
        await message.answer(
            "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.",
            reply_markup=main_menu
        )
        user_cart[message.from_user.id] = []  # –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
    else:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_unknown(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
